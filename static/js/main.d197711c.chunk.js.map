{"version":3,"sources":["logo.svg","cof.png","../node_modules/encoding/lib sync","App.js","SolvedPlace.jsx","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","faceID","model","webcam","maxPredictions","SolvedPlace","Fragment","this","props","visibility","className","onClick","place","React","Component","all","require","isRunning","find","URL","App","random","Math","floor","create_all","prediction","i","push","shot","predict","sucsess","setState","mustShow","state","next","setTimeout","document","getElementById","innerHTML","style","display","appendChild","canvas","window","requestAnimationFrame","loop","handleClick","bind","init","console","log","tmImage","getTotalClasses","height1","$","height","width1","width","setup","play","update","classPrediction","probability","toFixed","weight","zIndex","position","Boolean","location","hostname","match","connect","send","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d197711c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cof.88fc8da6.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 274;","import React from 'react';\nimport logo from './logo.svg';\nimport c from './cof.png'\nimport '@vkontakte/vkui/dist/vkui.css';\nimport {Root, View, Panel, File} from '@vkontakte/vkui'\nimport base64js from 'base64js';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tmImage from '@teachablemachine/image';\nimport axios from 'axios';\nimport MyComponent from 'mobile-canvas-camera'\nimport './App.css';\nimport $ from \"../node_modules/jquery/dist/jquery\";\nimport SolvedPlace from './SolvedPlace';\nconst image2base64 = require('image-to-base64');\n\n\n/*var img;\n\nasync function  W(){\n  let preimg = document.getElementById('preimg');\n  let file = preimg.files[0];\n  let reader = new FileReader();\n  let blob = new Blob([file], {type: 'image/png'});\n  console.log(blob);\n   var a  = URL.createObjectURL(file);\n   const img = new Image();\n   img.src = a;\n\n  const model = await mobilenet.load(\"model.json\",\"metadata.json\");\n// Classify the image.\nconst predictions = await model.classify(img);\n\nconsole.log('Predictions: ');\nconsole.log(predictions);*/\nvar all = [];\nvar isRunning = true;\nvar find = true;\nvar faceID;\nvar level;\n\nconst URL = \"https://teachablemachine.withgoogle.com/models/LaTJd2ug/\";\n\n\n   let model, webcam, labelContainer, maxPredictions;\n\n\n     // Load the image model and setup the webcam\n\nclass App extends React.Component{\nconstructor(props){\n  super(props);\n\n  this.state={\n    mustShow:false,\n    place:'Соборная колокольня'\n\n\n\n };\n this.handleClick=this.handleClick.bind(this);\n this.init = this.init.bind(this);\n this.loop = this.loop.bind(this);\n  this.predict = this.predict.bind(this);\n}\n\n random=()=>{\n  return Math.floor(Math.random() * Math.floor(maxPredictions));\n}\n\ncreate_all=(prediction)=>{\n  for (let i = 0; i < maxPredictions; i++) {\n    all.push(prediction[i].className);\n  }\n}\n async init () {\n  //document.body.style.overflow = \"hidden\"\n    const modelURL = URL + \"model.json\";\n    const metadataURL = URL + \"metadata.json\";\n    console.log(1);\n    model = await tmImage.load(modelURL, metadataURL);\n    maxPredictions = model.getTotalClasses();\n    var canvas = document.getElementById(\"canvas\");\n    const prediction = await model.predict(canvas);\n    this.create_all(prediction);\n\n    console.log(prediction);\n  faceID = this.random();\n   var newDiv = document.getElementById(\"fin\");\n //  newDiv.innerHTML = \"<h1>\"+all[faceID]+\"</h1>\";\n\n   console.log(faceID);\n   console.log(all);\n    // Convenience function to setup a webcam\n    const flip = true; // whether to flip the webcam\n    let height1=$('#webcam-container').height();\n    let width1=$('#webcam-container').width();\n    if(height1>width1){\n\n     webcam = new tmImage.Webcam(height1,width1, flip);\n\n    }\n    else{\n     webcam = new tmImage.Webcam(width1,height1, flip);\n   }\n    await webcam.setup(); // request access to the webcam\n    await webcam.play();\n\n    window.requestAnimationFrame(this.loop);\n\n\n\n    document.getElementById(\"webcam-container\").appendChild(webcam.canvas);\n\n}\n\nasync loop() {\n    if(isRunning == true){\n    webcam.update();\n    //this.predict();\n    window.requestAnimationFrame(this.loop);\n  }\n}\nshot=()=>{\n  if(find == true){\n   this.predict();\n }\n\n}\n  async  predict(){\n  const prediction = await model.predict(webcam.canvas);\n  for (let i = 0; i < maxPredictions; i++) {\n    const classPrediction =\n          prediction[i].className + \": \" + prediction[i].probability.toFixed(2);\n       console.log(classPrediction);\n     if(prediction[i].probability.toFixed(3) >= 0.999&&prediction[i].className != 'other'){\n       this.setState({place:prediction[i].className});\n       this.sucsess();\n     }\n\n  }\n\n}\n\nsucsess=(e)=>{\nisRunning=false;\n find=false;\n this.setState({mustShow:!this.state.mustShow})\n}\n\nnext=()=>{\nsetTimeout(()=>{\n isRunning=true;\n find=true;\n   faceID = this.random();\nvar newDiv = document.getElementById(\"fin\");\nnewDiv.innerHTML = \"<h1>\"+all[faceID]+\"</h1>\";\nlet line = document.getElementById(\"webcam-container\");\nline.style.display = \"block\";\ndocument.getElementById(\"webcam-container\").appendChild(webcam.canvas);\n window.requestAnimationFrame(this.loop);\n},3000)\n}\n\nhandleClick(e){\n  this.init();\n\n}\n\n\nrender() {\n  return (\n   <> <div id=\"webcam-container\" onClick={()=>this.shot()} style={{weight:'100vw',height:\"100vh\",zIndex:\"103000\",position:\"relative\"}}/>\n\n<div className=\"App\">\n\n\n<div id=\"fin\"></div>\n\n<button id=\"next\" style={{display:'none'}} onClick={()=>this.next()}>Следующий</button>\n<SolvedPlace visibility={this.state.mustShow}    onClick={this.handleClick} place={this.state.place}/>\n    <div id=\"shotting\" onClick={this.handleClick} ></div>\n\n</div>\n<canvas id=\"canvas\" style={{display:'none'}}/></>\n  );\n}}\nexport default App;\n","import React from \"react\";\r\n\r\nclass SolvedPlace extends React.Component{\r\n    render(){\r\n    return(\r\n        <React.Fragment>\r\n        {this.props.visibility?<div className={\"information_\"+this.props.visibility}  onClick={this.props.onClick}>\r\n        <div className=\"placeName\">\r\n    {this.props.place}\r\n        </div>\r\n    </div>:<div className={\"information_\"+this.props.visibility}  >\r\n    <div className=\"placeName\">\r\n{this.props.place}\r\n    </div>\r\n</div>}</React.Fragment>\r\n\r\n\r\n\r\n    );\r\n    }\r\n}\r\nexport default SolvedPlace;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport connect from '@vkontakte/vk-connect';\nimport * as serviceWorker from './serviceWorker';\nconnect.send(\"VKWebAppInit\", {});\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}