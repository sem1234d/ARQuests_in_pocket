{"version":3,"sources":["logo.svg","cof.png","../node_modules/encoding/lib sync","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","model","labelContainer","maxPredictions","isRunning","require","URL","document","getElementById","a","modelURL","metadataURL","tmImage","getTotalClasses","setupCamera","i","appendChild","createElement","snapshot","video","canvas","getContext","drawImage","src","toDataURL","pause","navigator","mediaDevices","getUserMedia","facingMode","stream","srcObject","play","console","log","window","requestAnimationFrame","loop","predict","prediction","probability","toFixed","className","classPrediction","childNodes","innerHTML","render","type","onClick","init","autoplay","muted","style","weight","height","Boolean","location","hostname","match","connect","send","ReactDOM","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,4SCA3C,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBO,GAAK,K,4CC4BlBC,EAAeC,EAAgBC,E,4HAJlCC,G,qBApBiBC,EAAQ,MAoBb,GAEVC,GADMC,SAASC,eAAe,UACxB,4D,4CAMT,gCAAAC,EAAA,6DACUC,EAAWJ,EAAM,aACjBK,EAAcL,EAAM,gBAF9B,SAQkBM,OAAaF,EAAUC,GARzC,OAgBI,IARAV,EARJ,OASIE,EAAiBF,EAAOY,kBAC3BC,IAKGZ,EAAiBK,SAASC,eAAe,mBAChCO,EAAI,EAAGA,EAAIZ,EAAgBY,IAChCb,EAAec,YAAYT,SAASU,cAAc,QAjB1D,4C,sBAqBA,SAASC,IACR,IAAIC,EAAQZ,SAASC,eAAe,UAChCY,EAASb,SAASC,eAAe,UAC3BY,EAAOC,WAAW,MACxBC,UAAUH,EAAO,EAAG,GACxBZ,SAASC,eAAe,OAAOe,IAAMH,EAAOI,UAAU,cACtDL,EAAMM,Q,SAIQX,I,2EAAf,8BAAAL,EAAA,0DACMiB,UAAUC,eAAgBD,UAAUC,aAAaC,aADvD,gCAEyBF,UAAUC,aAAaC,aAAa,CACvD,OAAS,EACT,MAAS,CAACC,WAAY,iBAJ5B,OAEUC,EAFV,QAMQX,EAAQZ,SAASC,eAAe,WAC9BuB,UAAYD,EAClBX,EAAMa,OACNC,QAAQC,WAAWJ,GACnBK,OAAOC,sBAAsBC,GAVjC,4C,+BAagBA,I,2EAAhB,sBAAA5B,EAAA,sDACD6B,IACFL,QAAQC,IAAI,GACW,GAAb9B,EACH+B,OAAOC,sBAAsBC,GACzBJ,QAAQC,IAAI,OALpB,4C,+BASmBI,I,2EAAf,kCAAA7B,EAAA,6DACOU,EAAQZ,SAASC,eAAe,UADvC,SAEyBP,EAAMqC,QAAQnB,GAFvC,OAGA,IADMoB,EAFN,OAGSxB,EAAI,EAAGA,EAAIZ,EAAgBY,IAC9BwB,EAAWxB,GAAGyB,YAAYC,QAAQ,IAAM,QAAoC,SAA3BF,EAAWxB,GAAG2B,YAChEtC,GAAU,EACZc,IACEe,QAAQC,IAAIf,GACZc,QAAQC,IAAI,SAEPS,EACFJ,EAAWxB,GAAG2B,UAAY,KAAOH,EAAWxB,GAAGyB,YAAYC,QAAQ,GACvEvC,EAAe0C,WAAW7B,GAAG8B,UAAYF,EAZ7C,4C,sBA4BQG,MAZf,WACE,OACF,6BACK,8DACL,4BAAQC,KAAK,SAASC,QAAS,kB,0CAAIC,KAAnC,SACA,2BAAOjD,GAAG,SAASkD,UAAQ,EAACC,OAAK,IACjC,4BAAQnD,GAAG,WACX,yBAAKA,GAAG,oBACR,yBAAKA,GAAG,MAAMoD,MAAO,CAACC,OAAO,OAAOC,OAAO,Y,iBCzGvBC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAAQC,KAAK,eAAgB,IAC7BC,IAASf,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD0H3C,kBAAmBkB,WACrBA,UAAUoC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b92f949a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cof.88fc8da6.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 266;","import React from 'react';\nimport logo from './logo.svg';\nimport c from './cof.png'\nimport '@vkontakte/vkui/dist/vkui.css';\nimport {Root, View, Panel, File} from '@vkontakte/vkui'\nimport base64js from 'base64js';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tmImage from '@teachablemachine/image';\nimport axios from 'axios';\nimport MyComponent from 'mobile-canvas-camera'\nimport './App.css';\nconst image2base64 = require('image-to-base64');\n\n/*var img;\n\nasync function  W(){\n  let preimg = document.getElementById('preimg');\n  let file = preimg.files[0];\n  let reader = new FileReader();\n  let blob = new Blob([file], {type: 'image/png'});\n  console.log(blob);\n   var a  = URL.createObjectURL(file);\n   const img = new Image();\n   img.src = a;\n\n  const model = await mobilenet.load(\"model.json\",\"metadata.json\");\n// Classify the image.\nconst predictions = await model.classify(img);\n\nconsole.log('Predictions: ');\nconsole.log(predictions);*/\nvar isRunning = true;\nvar video = document.getElementById('camera');\nconst URL = \"https://teachablemachine.withgoogle.com/models/SDmlOAFI/\";\n\n   let model, webcam, labelContainer, maxPredictions;\n\n\n   // Load the image model and setup the webcam\n   async function init() {\n       const modelURL = URL + \"model.json\";\n       const metadataURL = URL + \"metadata.json\";\n\n       // load the model and metadata\n       // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\n       // or files from your local hard drive\n       // Note: the pose library adds \"tmImage\" object to your window (window.tmImage)\n       model = await tmImage.load(modelURL, metadataURL);\n       maxPredictions = model .getTotalClasses();\n    setupCamera();\n      // window.requestAnimationFrame(this.loop);\n\n       // append elements to the DOM\n\n       labelContainer = document.getElementById(\"label-container\");\n       for (let i = 0; i < maxPredictions; i++) { // and class labels\n           labelContainer.appendChild(document.createElement(\"div\"));\n       }\n   }\n\n   function snapshot() {\n    var video = document.getElementById('camera');\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(video, 0, 0);\n    document.getElementById('img').src = canvas.toDataURL('image/webp');\n    video.pause();\n}\n\n\n   async function setupCamera() {\n     if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n       const stream = await navigator.mediaDevices.getUserMedia({\n         'audio': false,\n         'video': {facingMode: 'environment'}\n       });\n       var video = document.getElementById('camera');\n       video.srcObject = stream;\n       video.play();\n       console.log(typeof(stream));\n       window.requestAnimationFrame(loop);\n\n     }}\n   async  function loop() {\n  predict()\nconsole.log(1);\n       if(isRunning == true){\n       window.requestAnimationFrame(loop);\n     }else{console.log('end');}\n   }\n\n   // run the webcam image through the image model\n       async function predict(){\n          var video = document.getElementById('camera');\n       const prediction = await model.predict(video);\n       for (let i = 0; i < maxPredictions; i++) {\n          if(prediction[i].probability.toFixed(5) >= 0.99999&&prediction[i].className == 'semen'){\n            isRunning=false;\n          snapshot();\n            console.log(video);\n            console.log('find');\n          }\n           const classPrediction =\n               prediction[i].className + \": \" + prediction[i].probability.toFixed(5);\n           labelContainer.childNodes[i].innerHTML = classPrediction;\n       }\n   }\n\nfunction render() {\n  return (\n<div>\n     <div>Teachable Machine Image Model</div>\n<button type=\"button\" onClick={()=>init()}>Start</button>\n<video id=\"camera\" autoplay muted/>\n<canvas id=\"canvas\"></canvas>\n<div id=\"label-container\"></div>\n<img id=\"img\" style={{weight:'100%',height:\"100%\"}}/>\n</div>\n  );\n}\nexport default render;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport connect from '@vkontakte/vk-connect';\nimport * as serviceWorker from './serviceWorker';\nconnect.send(\"VKWebAppInit\", {});\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}