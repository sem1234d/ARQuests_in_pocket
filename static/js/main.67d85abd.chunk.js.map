{"version":3,"sources":["logo.svg","cof.png","../node_modules/encoding/lib sync","App.js","SolvedPlace.jsx","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","faceID","model","webcam","maxPredictions","SolvedPlace","Fragment","this","props","visibility","className","onClick","place","React","Component","all","require","isRunning","find","URL","App","random","Math","floor","create_all","prediction","i","push","shot","predict","sucsess","setState","mustShow","state","next","setTimeout","document","getElementById","innerHTML","style","display","appendChild","canvas","window","requestAnimationFrame","loop","handleClick","bind","init","console","log","tmImage","getTotalClasses","height1","$","height","width1","width","setup","play","update","classPrediction","probability","toFixed","weight","zIndex","position","class","Boolean","location","hostname","match","connect","send","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67d85abd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cof.88fc8da6.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 273;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport c from './cof.png'\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {Root, View, Panel, File} from '@vkontakte/vkui'\r\nimport base64js from 'base64js';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as tmImage from '@teachablemachine/image';\r\nimport axios from 'axios';\r\nimport MyComponent from 'mobile-canvas-camera'\r\nimport './App.css';\r\nimport $ from \"../node_modules/jquery/dist/jquery\";\r\nimport SolvedPlace from './SolvedPlace';\r\nconst image2base64 = require('image-to-base64');\r\n\r\n\r\n/*var img;\r\n\r\nasync function  W(){\r\n  let preimg = document.getElementById('preimg');\r\n  let file = preimg.files[0];\r\n  let reader = new FileReader();\r\n  let blob = new Blob([file], {type: 'image/png'});\r\n  console.log(blob);\r\n   var a  = URL.createObjectURL(file);\r\n   const img = new Image();\r\n   img.src = a;\r\n\r\n  const model = await mobilenet.load(\"model.json\",\"metadata.json\");\r\n// Classify the image.\r\nconst predictions = await model.classify(img);\r\n\r\nconsole.log('Predictions: ');\r\nconsole.log(predictions);*/\r\nvar all = [];\r\nvar isRunning = true;\r\nvar find = true;\r\nvar faceID;\r\nvar level;\r\n\r\nconst URL = \"https://teachablemachine.withgoogle.com/models/yaMiK4Ex/\";\r\n\r\n\r\n   let model, webcam, labelContainer, maxPredictions;\r\n\r\n\r\n     // Load the image model and setup the webcam\r\n\r\nclass App extends React.Component{\r\nconstructor(props){\r\n  super(props);\r\n\r\n  this.state={\r\n    mustShow:false,\r\n    place:'Соборная колокольня'\r\n\r\n\r\n\r\n };\r\n this.handleClick=this.handleClick.bind(this);\r\n this.init = this.init.bind(this);\r\n this.loop = this.loop.bind(this);\r\n  this.predict = this.predict.bind(this);\r\n}\r\n\r\ncomponentDidMount(e){\r\n  this.init();\r\n}\r\n\r\n random=()=>{\r\n  return Math.floor(Math.random() * Math.floor(maxPredictions));\r\n}\r\n\r\ncreate_all=(prediction)=>{\r\n  for (let i = 0; i < maxPredictions; i++) {\r\n    all.push(prediction[i].className);\r\n  }\r\n}\r\n async init () {\r\n  //document.body.style.overflow = \"hidden\"\r\n    const modelURL = URL + \"model.json\";\r\n    const metadataURL = URL + \"metadata.json\";\r\n    console.log(1);\r\n    model = await tmImage.load(modelURL, metadataURL);\r\n    maxPredictions = model.getTotalClasses();\r\n    var canvas = document.getElementById(\"canvas\");\r\n    const prediction = await model.predict(canvas);\r\n    this.create_all(prediction);\r\n\r\n    console.log(prediction);\r\n  faceID = this.random();\r\n   var newDiv = document.getElementById(\"fin\");\r\n //  newDiv.innerHTML = \"<h1>\"+all[faceID]+\"</h1>\";\r\n\r\n   console.log(faceID);\r\n   console.log(all);\r\n    // Convenience function to setup a webcam\r\n    const flip = false; // whether to flip the webcam\r\n    let height1=$('#webcam-container').height();\r\n    let width1=$('#webcam-container').width();\r\n    if(height1>width1){\r\n\r\n     webcam = new tmImage.Webcam(height1,width1, flip);\r\n\r\n    }\r\n    else{\r\n     webcam = new tmImage.Webcam(width1,height1, flip);\r\n   }\r\n    await webcam.setup(); // request access to the webcam\r\n    await webcam.play();\r\n    let spinner=document.getElementById('spinner');\r\n    spinner.style.display = 'none';\r\n    window.requestAnimationFrame(this.loop);\r\n\r\n\r\n\r\n    document.getElementById(\"webcam-container\").appendChild(webcam.canvas);\r\n\r\n}\r\n\r\nasync loop() {\r\n    if(isRunning == true){\r\n    webcam.update();\r\n    //this.predict();\r\n    window.requestAnimationFrame(this.loop);\r\n  }\r\n}\r\nshot=()=>{\r\n  if(find == true){\r\n   this.predict();\r\n }\r\n\r\n}\r\n  async  predict(){\r\n  const prediction = await model.predict(webcam.canvas);\r\n  for (let i = 0; i < maxPredictions; i++) {\r\n    const classPrediction =\r\n          prediction[i].className + \": \" + prediction[i].probability.toFixed(2);\r\n       console.log(classPrediction);\r\n     if(prediction[i].probability.toFixed(2) >= 0.89&&prediction[i].className != 'other'){\r\n       this.setState({place:prediction[i].className});\r\n       this.sucsess();\r\n     }\r\n\r\n  }\r\n\r\n}\r\n\r\nsucsess=(e)=>{\r\nisRunning=false;\r\n find=false;\r\n this.setState({mustShow:!this.state.mustShow})\r\n}\r\n\r\nnext=()=>{\r\nsetTimeout(()=>{\r\n isRunning=true;\r\n find=true;\r\n   faceID = this.random();\r\nvar newDiv = document.getElementById(\"fin\");\r\nnewDiv.innerHTML = \"<h1>\"+all[faceID]+\"</h1>\";\r\nlet line = document.getElementById(\"webcam-container\");\r\nline.style.display = \"block\";\r\ndocument.getElementById(\"webcam-container\").appendChild(webcam.canvas);\r\n window.requestAnimationFrame(this.loop);\r\n},3000)\r\n}\r\n\r\nhandleClick(e){\r\n  this.shot();\r\n}\r\n\r\n\r\nrender() {\r\n  return (\r\n   <> <div id=\"webcam-container\" onClick={()=>this.shot()} style={{weight:'100vw',height:\"100vh\",zIndex:\"103000\",position:\"relative\"}}/>\r\n\r\n<div className=\"App\">\r\n\r\n\r\n<div id=\"fin\"></div>\r\n\r\n<button id=\"next\" style={{display:'none'}} onClick={()=>this.next()}>Следующий</button>\r\n<SolvedPlace visibility={this.state.mustShow}    onClick={this.handleClick} place={this.state.place}/>\r\n    <div id=\"shotting\" onClick={this.handleClick} ></div>\r\n\r\n</div>\r\n<div class=\"spinner\" id=\"spinner\"></div>\r\n<canvas id=\"canvas\" style={{display:'none'}}/></>\r\n  );\r\n}}\r\nexport default App;\r\n","import React from \"react\";\r\n\r\nclass SolvedPlace extends React.Component{\r\n    render(){\r\n    return(\r\n        <React.Fragment>\r\n        {this.props.visibility?<div className={\"information_\"+this.props.visibility}  onClick={this.props.onClick}>\r\n        <div className=\"placeName\">\r\n    {this.props.place}\r\n        </div>\r\n    </div>:<div className={\"information_\"+this.props.visibility}  >\r\n    <div className=\"placeName\">\r\n{this.props.place}\r\n    </div>\r\n</div>}</React.Fragment>\r\n\r\n\r\n\r\n    );\r\n    }\r\n}\r\nexport default SolvedPlace;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport connect from '@vkontakte/vk-connect';\r\nimport * as serviceWorker from './serviceWorker';\r\nconnect.send(\"VKWebAppInit\", {});\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}